// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GameNFT1155TokenInfo is an auto generated low-level Go binding around an user-defined struct.
type GameNFT1155TokenInfo struct {
	TokenId  *big.Int
	Quantity *big.Int
	Uri      string
}

// GameNFT1155MetaData contains all meta data concerning the GameNFT1155 contract.
var GameNFT1155MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllOwnedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"structGameNFT1155.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"}],\"name\":\"getOwnedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"structGameNFT1155.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003628380380620036288339810160408190526200003491620002d3565b80806200004181620000b9565b506005805460ff1916905562000059600033620000d2565b620000857f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000d2565b620000b17f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620000d2565b505062000402565b8051620000ce9060049060208401906200022d565b5050565b620000ce8282620000ef82826200011b60201b62000eb71760201c565b60008281526001602090815260409091206200011691839062000f3b620001bb821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000ce576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001773390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001d2836001600160a01b038416620001db565b90505b92915050565b60008181526001830160205260408120546200022457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001d5565b506000620001d5565b8280546200023b90620003af565b90600052602060002090601f0160209004810192826200025f5760008555620002aa565b82601f106200027a57805160ff1916838001178555620002aa565b82800160010185558215620002aa579182015b82811115620002aa5782518255916020019190600101906200028d565b50620002b8929150620002bc565b5090565b5b80821115620002b85760008155600101620002bd565b60006020808385031215620002e757600080fd5b82516001600160401b0380821115620002ff57600080fd5b818501915085601f8301126200031457600080fd5b815181811115620003295762000329620003ec565b604051601f8201601f19908116603f01168101908382118183101715620003545762000354620003ec565b8160405282815288868487010111156200036d57600080fd5b600093505b8284101562000391578484018601518185018701529285019262000372565b82841115620003a35760008684830101525b98975050505050505050565b600181811c90821680620003c457607f821691505b60208210811415620003e657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61321680620004126000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c80636b20c454116100f9578063ca15c87311610097578063e63ab1e911610071578063e63ab1e9146103ef578063e985e9c514610416578063f242432a14610452578063f5298aca1461046557600080fd5b8063ca15c873146103a2578063d5391393146103b5578063d547741f146103dc57600080fd5b80639010d07c116100d35780639010d07c1461034957806391d1485414610374578063a217fddf14610387578063a22cb4651461038f57600080fd5b80636b20c4541461031b578063731133e91461032e5780638456cb591461034157600080fd5b80632eb2c2d61161016657806336568abe1161014057806336568abe146102d55780633f4ba83a146102e85780634e1273f4146102f05780635c975abb1461031057600080fd5b80632eb2c2d61461029c5780632f2ff15d146102af57806330176e13146102c257600080fd5b80630e89341c116101a25780630e89341c146102315780630f915c64146102515780631f7fdffa14610264578063248a9ca31461027957600080fd5b8062fdd58e146101c857806301ffc9a7146101ee578063082a656914610211575b600080fd5b6101db6101d63660046127da565b610478565b6040519081526020015b60405180910390f35b6102016101fc3660046129b9565b610514565b60405190151581526020016101e5565b61022461021f366004612804565b61051f565b6040516101e59190612bf9565b61024461023f36600461295b565b610771565b6040516101e59190612cb9565b61022461025f366004612538565b610821565b610277610272366004612706565b610897565b005b6101db61028736600461295b565b60009081526020819052604090206001015490565b6102776102aa366004612586565b6108ef565b6102776102bd366004612974565b610986565b6102776102d03660046129f3565b6109b1565b6102776102e3366004612974565b610a20565b610277610a9e565b6103036102fe36600461288b565b610b44565b6040516101e59190612c78565b60055460ff16610201565b610277610329366004612693565b610c6d565b61027761033c366004612837565b610cb0565b610277610d02565b61035c610357366004612997565b610da6565b6040516001600160a01b0390911681526020016101e5565b610201610382366004612974565b610dbe565b6101db600081565b61027761039d36600461279e565b610de7565b6101db6103b036600461295b565b610df2565b6101db7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102776103ea366004612974565b610e09565b6101db7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b610201610424366004612553565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b61027761046036600461262f565b610e2f565b610277610473366004612804565b610e74565b60006001600160a01b0383166104e95760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061050e82610f50565b60065460609061057e576040805160008082526020820190925290610576565b61056360405180606001604052806000815260200160008152602001606081525090565b81526020019060019003908161053f5790505b50905061076a565b6006548290811061059b5760065461059890600190612fc7565b90505b808411156105eb5760405162461bcd60e51b815260206004820181905260248201527f47616d654e4654313135353a20696e76616c69642071756572792072616e676560448201526064016104e0565b6000845b82811161064557600061061f886006848154811061060f5761060f6130f9565b9060005260206000200154610478565b1115610633578161062f81613088565b9250505b8061063d81613088565b9150506105ef565b506000816001600160401b038111156106605761066061310f565b6040519080825280602002602001820160405280156106b557816020015b6106a260405180606001604052806000815260200160008152602001606081525090565b81526020019060019003908161067e5790505b5090506000865b848111610762576000600682815481106106d8576106d86130f9565b9060005260206000200154905060006106f18b83610478565b111561074f5760405180606001604052808281526020016107128c84610478565b815260200161072083610771565b815250848481518110610735576107356130f9565b6020026020010181905250828061074b90613088565b9350505b508061075a81613088565b9150506106bc565b509093505050505b9392505050565b60008181526007602052604090205460609060ff166107e85760405162461bcd60e51b815260206004820152602d60248201527f47616d654e4654313135353a2055524920717565727920666f72206e6f6e2d6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084016104e0565b6107f182610f90565b6107fa83611024565b60405160200161080b929190612aa2565b6040516020818303038152906040529050919050565b60065460609061087f576040805160008082526020820190925290610878565b61086560405180606001604052806000815260200160008152602001606081525090565b8152602001906001900390816108415790505b5092915050565b61050e826000600160068054905061021f9190612fc7565b6108c17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610dbe565b6108dd5760405162461bcd60e51b81526004016104e090612e29565b6108e984848484611129565b50505050565b6001600160a01b03851633148061090b575061090b8533610424565b6109725760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016104e0565b61097f8585858585611284565b5050505050565b6000828152602081905260409020600101546109a28133611431565b6109ac8383611495565b505050565b6109bc600033610dbe565b610a145760405162461bcd60e51b815260206004820152602360248201527f47616d654e4654313135353a2063616c6c6572206973206e6f7420616e20616460448201526236b4b760e91b60648201526084016104e0565b610a1d816114b7565b50565b6001600160a01b0381163314610a905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104e0565b610a9a82826114ca565b5050565b610ac87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610dbe565b610b3a5760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e7061757365000000000060648201526084016104e0565b610b426114ec565b565b60608151835114610ba95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104e0565b600083516001600160401b03811115610bc457610bc461310f565b604051908082528060200260200182016040528015610bed578160200160208202803683370190505b50905060005b8451811015610c6557610c38858281518110610c1157610c116130f9565b6020026020010151858381518110610c2b57610c2b6130f9565b6020026020010151610478565b828281518110610c4a57610c4a6130f9565b6020908102919091010152610c5e81613088565b9050610bf3565b509392505050565b6001600160a01b038316331480610c895750610c898333610424565b610ca55760405162461bcd60e51b81526004016104e090612d58565b6109ac83838361157f565b610cda7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610dbe565b610cf65760405162461bcd60e51b81526004016104e090612e29565b6108e984848484611710565b610d2c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610dbe565b610d9e5760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f2070617573650000000000000060648201526084016104e0565b610b426117e8565b600082815260016020526040812061076a9083611863565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610a9a33838361186f565b600081815260016020526040812061050e90611950565b600082815260208190526040902060010154610e258133611431565b6109ac83836114ca565b6001600160a01b038516331480610e4b5750610e4b8533610424565b610e675760405162461bcd60e51b81526004016104e090612d58565b61097f858585858561195a565b6001600160a01b038316331480610e905750610e908333610424565b610eac5760405162461bcd60e51b81526004016104e090612d58565b6109ac838383611a7b565b610ec18282610dbe565b610a9a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610ef73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061076a836001600160a01b038416611b80565b60006001600160e01b03198216636cdb3d1360e11b1480610f8157506001600160e01b031982166303a24d0760e21b145b8061050e575061050e82611bcf565b606060048054610f9f90613021565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcb90613021565b80156110185780601f10610fed57610100808354040283529160200191611018565b820191906000526020600020905b815481529060010190602001808311610ffb57829003601f168201915b50505050509050919050565b6060816110485750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611072578061105c81613088565b915061106b9050600a83612f94565b915061104c565b6000816001600160401b0381111561108c5761108c61310f565b6040519080825280601f01601f1916602001820160405280156110b6576020820181803683370190505b5090505b8415611121576110cb600183612fc7565b91506110d8600a866130a3565b6110e3906030612f7c565b60f81b8183815181106110f8576110f86130f9565b60200101906001600160f81b031916908160001a90535061111a600a86612f94565b94506110ba565b949350505050565b6001600160a01b03841661114f5760405162461bcd60e51b81526004016104e090612f18565b81518351146111705760405162461bcd60e51b81526004016104e090612ed0565b3361118081600087878787611bf4565b60005b845181101561121c5783818151811061119e5761119e6130f9565b6020026020010151600260008784815181106111bc576111bc6130f9565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546112049190612f7c565b9091555081905061121481613088565b915050611183565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161126d929190612c8b565b60405180910390a461097f81600087878787611d32565b81518351146112a55760405162461bcd60e51b81526004016104e090612ed0565b6001600160a01b0384166112cb5760405162461bcd60e51b81526004016104e090612da1565b336112da818787878787611bf4565b60005b84518110156113c35760008582815181106112fa576112fa6130f9565b602002602001015190506000858381518110611318576113186130f9565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156113695760405162461bcd60e51b81526004016104e090612e86565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906113a8908490612f7c565b92505081905550505050806113bc90613088565b90506112dd565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611413929190612c8b565b60405180910390a4611429818787878787611d32565b505050505050565b61143b8282610dbe565b610a9a57611453816001600160a01b03166014611e9d565b61145e836020611e9d565b60405160200161146f929190612ae1565b60408051601f198184030181529082905262461bcd60e51b82526104e091600401612cb9565b61149f8282610eb7565b60008281526001602052604090206109ac9082610f3b565b8051610a9a90600490602084019061238f565b6114d48282612038565b60008281526001602052604090206109ac908261209d565b60055460ff166115355760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104e0565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166115a55760405162461bcd60e51b81526004016104e090612de6565b80518251146115c65760405162461bcd60e51b81526004016104e090612ed0565b60003390506115e981856000868660405180602001604052806000815250611bf4565b60005b83518110156116b1576000848281518110611609576116096130f9565b602002602001015190506000848381518110611627576116276130f9565b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156116785760405162461bcd60e51b81526004016104e090612d14565b60009283526002602090815260408085206001600160a01b038b16865290915290922091039055806116a981613088565b9150506115ec565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611702929190612c8b565b60405180910390a450505050565b6001600160a01b0384166117365760405162461bcd60e51b81526004016104e090612f18565b3361175681600087611747886120b2565b611750886120b2565b87611bf4565b60008481526002602090815260408083206001600160a01b038916845290915281208054859290611788908490612f7c565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461097f816000878787876120fd565b60055460ff161561182e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104e0565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115623390565b600061076a83836121c7565b816001600160a01b0316836001600160a01b031614156118e35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104e0565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600061050e825490565b6001600160a01b0384166119805760405162461bcd60e51b81526004016104e090612da1565b33611990818787611747886120b2565b60008481526002602090815260408083206001600160a01b038a168452909152902054838110156119d35760405162461bcd60e51b81526004016104e090612e86565b60008581526002602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611a12908490612f7c565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a728288888888886120fd565b50505050505050565b6001600160a01b038316611aa15760405162461bcd60e51b81526004016104e090612de6565b33611ad081856000611ab2876120b2565b611abb876120b2565b60405180602001604052806000815250611bf4565b60008381526002602090815260408083206001600160a01b038816845290915290205482811015611b135760405162461bcd60e51b81526004016104e090612d14565b60008481526002602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000818152600183016020526040812054611bc75750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050e565b50600061050e565b60006001600160e01b03198216635a05180f60e01b148061050e575061050e826121f1565b8151835114611c455760405162461bcd60e51b815260206004820152601d60248201527f47616d654e4654313135353a206c656e67746873206d69736d6174636800000060448201526064016104e0565b6001600160a01b038516611d245760005b8351811015611d225760076000858381518110611c7557611c756130f9565b60209081029190910181015182528101919091526040016000205460ff16611d1057600160076000868481518110611caf57611caf6130f9565b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055506006848281518110611cf057611cf06130f9565b602090810291909101810151825460018101845560009384529190922001555b80611d1a81613088565b915050611c56565b505b611429868686868686612226565b6001600160a01b0384163b156114295760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d769089908990889088908890600401612b56565b602060405180830381600087803b158015611d9057600080fd5b505af1925050508015611dc0575060408051601f3d908101601f19168201909252611dbd918101906129d6565b60015b611e6d57611dcc613125565b806308c379a01415611e065750611de1613141565b80611dec5750611e08565b8060405162461bcd60e51b81526004016104e09190612cb9565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104e0565b6001600160e01b0319811663bc197c8160e01b14611a725760405162461bcd60e51b81526004016104e090612ccc565b60606000611eac836002612fa8565b611eb7906002612f7c565b6001600160401b03811115611ece57611ece61310f565b6040519080825280601f01601f191660200182016040528015611ef8576020820181803683370190505b509050600360fc1b81600081518110611f1357611f136130f9565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f4257611f426130f9565b60200101906001600160f81b031916908160001a9053506000611f66846002612fa8565b611f71906001612f7c565b90505b6001811115611fe9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fa557611fa56130f9565b1a60f81b828281518110611fbb57611fbb6130f9565b60200101906001600160f81b031916908160001a90535060049490941c93611fe28161300a565b9050611f74565b50831561076a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104e0565b6120428282610dbe565b15610a9a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061076a836001600160a01b038416612234565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106120ec576120ec6130f9565b602090810291909101015292915050565b6001600160a01b0384163b156114295760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121419089908990889088908890600401612bb4565b602060405180830381600087803b15801561215b57600080fd5b505af192505050801561218b575060408051601f3d908101601f19168201909252612188918101906129d6565b60015b61219757611dcc613125565b6001600160e01b0319811663f23a6e6160e01b14611a725760405162461bcd60e51b81526004016104e090612ccc565b60008260000182815481106121de576121de6130f9565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b148061050e57506301ffc9a760e01b6001600160e01b031983161461050e565b611429868686868686612327565b6000818152600183016020526040812054801561231d576000612258600183612fc7565b855490915060009061226c90600190612fc7565b90508181146122d157600086600001828154811061228c5761228c6130f9565b90600052602060002001549050808760000184815481106122af576122af6130f9565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806122e2576122e26130e3565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061050e565b600091505061050e565b60055460ff16156114295760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016104e0565b82805461239b90613021565b90600052602060002090601f0160209004810192826123bd5760008555612403565b82601f106123d657805160ff1916838001178555612403565b82800160010185558215612403579182015b828111156124035782518255916020019190600101906123e8565b5061240f929150612413565b5090565b5b8082111561240f5760008155600101612414565b60006001600160401b038311156124415761244161310f565b604051612458601f8501601f19166020018261305c565b80915083815284848401111561246d57600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461249c57600080fd5b919050565b600082601f8301126124b257600080fd5b813560206124bf82612f59565b6040516124cc828261305c565b8381528281019150858301600585901b870184018810156124ec57600080fd5b60005b8581101561250b578135845292840192908401906001016124ef565b5090979650505050505050565b600082601f83011261252957600080fd5b61076a83833560208501612428565b60006020828403121561254a57600080fd5b61076a82612485565b6000806040838503121561256657600080fd5b61256f83612485565b915061257d60208401612485565b90509250929050565b600080600080600060a0868803121561259e57600080fd5b6125a786612485565b94506125b560208701612485565b935060408601356001600160401b03808211156125d157600080fd5b6125dd89838a016124a1565b945060608801359150808211156125f357600080fd5b6125ff89838a016124a1565b9350608088013591508082111561261557600080fd5b5061262288828901612518565b9150509295509295909350565b600080600080600060a0868803121561264757600080fd5b61265086612485565b945061265e60208701612485565b9350604086013592506060860135915060808601356001600160401b0381111561268757600080fd5b61262288828901612518565b6000806000606084860312156126a857600080fd5b6126b184612485565b925060208401356001600160401b03808211156126cd57600080fd5b6126d9878388016124a1565b935060408601359150808211156126ef57600080fd5b506126fc868287016124a1565b9150509250925092565b6000806000806080858703121561271c57600080fd5b61272585612485565b935060208501356001600160401b038082111561274157600080fd5b61274d888389016124a1565b9450604087013591508082111561276357600080fd5b61276f888389016124a1565b9350606087013591508082111561278557600080fd5b5061279287828801612518565b91505092959194509250565b600080604083850312156127b157600080fd5b6127ba83612485565b9150602083013580151581146127cf57600080fd5b809150509250929050565b600080604083850312156127ed57600080fd5b6127f683612485565b946020939093013593505050565b60008060006060848603121561281957600080fd5b61282284612485565b95602085013595506040909401359392505050565b6000806000806080858703121561284d57600080fd5b61285685612485565b9350602085013592506040850135915060608501356001600160401b0381111561287f57600080fd5b61279287828801612518565b6000806040838503121561289e57600080fd5b82356001600160401b03808211156128b557600080fd5b818501915085601f8301126128c957600080fd5b813560206128d682612f59565b6040516128e3828261305c565b8381528281019150858301600585901b870184018b101561290357600080fd5b600096505b8487101561292d5761291981612485565b835260019690960195918301918301612908565b509650508601359250508082111561294457600080fd5b50612951858286016124a1565b9150509250929050565b60006020828403121561296d57600080fd5b5035919050565b6000806040838503121561298757600080fd5b8235915061257d60208401612485565b600080604083850312156129aa57600080fd5b50508035926020909101359150565b6000602082840312156129cb57600080fd5b813561076a816131ca565b6000602082840312156129e857600080fd5b815161076a816131ca565b600060208284031215612a0557600080fd5b81356001600160401b03811115612a1b57600080fd5b8201601f81018413612a2c57600080fd5b61112184823560208401612428565b600081518084526020808501945080840160005b83811015612a6b57815187529582019590820190600101612a4f565b509495945050505050565b60008151808452612a8e816020860160208601612fde565b601f01601f19169290920160200192915050565b60008351612ab4818460208801612fde565b835190830190612ac8818360208801612fde565b64173539b7b760d91b9101908152600501949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b19816017850160208801612fde565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b4a816028840160208801612fde565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090612b8290830186612a3b565b8281036060840152612b948186612a3b565b90508281036080840152612ba88185612a76565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612bee90830184612a76565b979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612c6a57888303603f1901855281518051845287810151888501528601516060878501819052612c5681860183612a76565b968901969450505090860190600101612c20565b509098975050505050505050565b60208152600061076a6020830184612a3b565b604081526000612c9e6040830185612a3b565b8281036020840152612cb08185612a3b565b95945050505050565b60208152600061076a6020830184612a76565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60006001600160401b03821115612f7257612f7261310f565b5060051b60200190565b60008219821115612f8f57612f8f6130b7565b500190565b600082612fa357612fa36130cd565b500490565b6000816000190483118215151615612fc257612fc26130b7565b500290565b600082821015612fd957612fd96130b7565b500390565b60005b83811015612ff9578181015183820152602001612fe1565b838111156108e95750506000910152565b600081613019576130196130b7565b506000190190565b600181811c9082168061303557607f821691505b6020821081141561305657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156130815761308161310f565b6040525050565b600060001982141561309c5761309c6130b7565b5060010190565b6000826130b2576130b26130cd565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561313e5760046000803e5060005160e01c5b90565b600060443d101561314f5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561317e57505050505090565b82850191508151818111156131965750505050505090565b843d87010160208285010111156131b05750505050505090565b6131bf6020828601018761305c565b509095945050505050565b6001600160e01b031981168114610a1d57600080fdfea2646970667358221220b231db34edf3137baaf7d301c3a444c0524dba1a5a0eae0e23e6e0402340967d64736f6c63430008060033",
}

// GameNFT1155ABI is the input ABI used to generate the binding from.
// Deprecated: Use GameNFT1155MetaData.ABI instead.
var GameNFT1155ABI = GameNFT1155MetaData.ABI

// GameNFT1155Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GameNFT1155MetaData.Bin instead.
var GameNFT1155Bin = GameNFT1155MetaData.Bin

// DeployGameNFT1155 deploys a new Ethereum contract, binding an instance of GameNFT1155 to it.
func DeployGameNFT1155(auth *bind.TransactOpts, backend bind.ContractBackend, uri_ string) (common.Address, *types.Transaction, *GameNFT1155, error) {
	parsed, err := GameNFT1155MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GameNFT1155Bin), backend, uri_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GameNFT1155{GameNFT1155Caller: GameNFT1155Caller{contract: contract}, GameNFT1155Transactor: GameNFT1155Transactor{contract: contract}, GameNFT1155Filterer: GameNFT1155Filterer{contract: contract}}, nil
}

// GameNFT1155 is an auto generated Go binding around an Ethereum contract.
type GameNFT1155 struct {
	GameNFT1155Caller     // Read-only binding to the contract
	GameNFT1155Transactor // Write-only binding to the contract
	GameNFT1155Filterer   // Log filterer for contract events
}

// GameNFT1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type GameNFT1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GameNFT1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type GameNFT1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GameNFT1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GameNFT1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GameNFT1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GameNFT1155Session struct {
	Contract     *GameNFT1155      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GameNFT1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GameNFT1155CallerSession struct {
	Contract *GameNFT1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// GameNFT1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GameNFT1155TransactorSession struct {
	Contract     *GameNFT1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// GameNFT1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type GameNFT1155Raw struct {
	Contract *GameNFT1155 // Generic contract binding to access the raw methods on
}

// GameNFT1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GameNFT1155CallerRaw struct {
	Contract *GameNFT1155Caller // Generic read-only contract binding to access the raw methods on
}

// GameNFT1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GameNFT1155TransactorRaw struct {
	Contract *GameNFT1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewGameNFT1155 creates a new instance of GameNFT1155, bound to a specific deployed contract.
func NewGameNFT1155(address common.Address, backend bind.ContractBackend) (*GameNFT1155, error) {
	contract, err := bindGameNFT1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155{GameNFT1155Caller: GameNFT1155Caller{contract: contract}, GameNFT1155Transactor: GameNFT1155Transactor{contract: contract}, GameNFT1155Filterer: GameNFT1155Filterer{contract: contract}}, nil
}

// NewGameNFT1155Caller creates a new read-only instance of GameNFT1155, bound to a specific deployed contract.
func NewGameNFT1155Caller(address common.Address, caller bind.ContractCaller) (*GameNFT1155Caller, error) {
	contract, err := bindGameNFT1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155Caller{contract: contract}, nil
}

// NewGameNFT1155Transactor creates a new write-only instance of GameNFT1155, bound to a specific deployed contract.
func NewGameNFT1155Transactor(address common.Address, transactor bind.ContractTransactor) (*GameNFT1155Transactor, error) {
	contract, err := bindGameNFT1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155Transactor{contract: contract}, nil
}

// NewGameNFT1155Filterer creates a new log filterer instance of GameNFT1155, bound to a specific deployed contract.
func NewGameNFT1155Filterer(address common.Address, filterer bind.ContractFilterer) (*GameNFT1155Filterer, error) {
	contract, err := bindGameNFT1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155Filterer{contract: contract}, nil
}

// bindGameNFT1155 binds a generic wrapper to an already deployed contract.
func bindGameNFT1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GameNFT1155ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GameNFT1155 *GameNFT1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GameNFT1155.Contract.GameNFT1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GameNFT1155 *GameNFT1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GameNFT1155.Contract.GameNFT1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GameNFT1155 *GameNFT1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GameNFT1155.Contract.GameNFT1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GameNFT1155 *GameNFT1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GameNFT1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GameNFT1155 *GameNFT1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GameNFT1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GameNFT1155 *GameNFT1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GameNFT1155.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Caller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Session) DEFAULTADMINROLE() ([32]byte, error) {
	return _GameNFT1155.Contract.DEFAULTADMINROLE(&_GameNFT1155.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155CallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _GameNFT1155.Contract.DEFAULTADMINROLE(&_GameNFT1155.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Caller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Session) MINTERROLE() ([32]byte, error) {
	return _GameNFT1155.Contract.MINTERROLE(&_GameNFT1155.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155CallerSession) MINTERROLE() ([32]byte, error) {
	return _GameNFT1155.Contract.MINTERROLE(&_GameNFT1155.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Caller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Session) PAUSERROLE() ([32]byte, error) {
	return _GameNFT1155.Contract.PAUSERROLE(&_GameNFT1155.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_GameNFT1155 *GameNFT1155CallerSession) PAUSERROLE() ([32]byte, error) {
	return _GameNFT1155.Contract.PAUSERROLE(&_GameNFT1155.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_GameNFT1155 *GameNFT1155Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_GameNFT1155 *GameNFT1155Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _GameNFT1155.Contract.BalanceOf(&_GameNFT1155.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_GameNFT1155 *GameNFT1155CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _GameNFT1155.Contract.BalanceOf(&_GameNFT1155.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_GameNFT1155 *GameNFT1155Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_GameNFT1155 *GameNFT1155Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _GameNFT1155.Contract.BalanceOfBatch(&_GameNFT1155.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_GameNFT1155 *GameNFT1155CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _GameNFT1155.Contract.BalanceOfBatch(&_GameNFT1155.CallOpts, accounts, ids)
}

// GetAllOwnedTokens is a free data retrieval call binding the contract method 0x0f915c64.
//
// Solidity: function getAllOwnedTokens(address user) view returns((uint256,uint256,string)[])
func (_GameNFT1155 *GameNFT1155Caller) GetAllOwnedTokens(opts *bind.CallOpts, user common.Address) ([]GameNFT1155TokenInfo, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "getAllOwnedTokens", user)

	if err != nil {
		return *new([]GameNFT1155TokenInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]GameNFT1155TokenInfo)).(*[]GameNFT1155TokenInfo)

	return out0, err

}

// GetAllOwnedTokens is a free data retrieval call binding the contract method 0x0f915c64.
//
// Solidity: function getAllOwnedTokens(address user) view returns((uint256,uint256,string)[])
func (_GameNFT1155 *GameNFT1155Session) GetAllOwnedTokens(user common.Address) ([]GameNFT1155TokenInfo, error) {
	return _GameNFT1155.Contract.GetAllOwnedTokens(&_GameNFT1155.CallOpts, user)
}

// GetAllOwnedTokens is a free data retrieval call binding the contract method 0x0f915c64.
//
// Solidity: function getAllOwnedTokens(address user) view returns((uint256,uint256,string)[])
func (_GameNFT1155 *GameNFT1155CallerSession) GetAllOwnedTokens(user common.Address) ([]GameNFT1155TokenInfo, error) {
	return _GameNFT1155.Contract.GetAllOwnedTokens(&_GameNFT1155.CallOpts, user)
}

// GetOwnedTokens is a free data retrieval call binding the contract method 0x082a6569.
//
// Solidity: function getOwnedTokens(address user, uint256 fromIndex, uint256 toIndex) view returns((uint256,uint256,string)[])
func (_GameNFT1155 *GameNFT1155Caller) GetOwnedTokens(opts *bind.CallOpts, user common.Address, fromIndex *big.Int, toIndex *big.Int) ([]GameNFT1155TokenInfo, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "getOwnedTokens", user, fromIndex, toIndex)

	if err != nil {
		return *new([]GameNFT1155TokenInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]GameNFT1155TokenInfo)).(*[]GameNFT1155TokenInfo)

	return out0, err

}

// GetOwnedTokens is a free data retrieval call binding the contract method 0x082a6569.
//
// Solidity: function getOwnedTokens(address user, uint256 fromIndex, uint256 toIndex) view returns((uint256,uint256,string)[])
func (_GameNFT1155 *GameNFT1155Session) GetOwnedTokens(user common.Address, fromIndex *big.Int, toIndex *big.Int) ([]GameNFT1155TokenInfo, error) {
	return _GameNFT1155.Contract.GetOwnedTokens(&_GameNFT1155.CallOpts, user, fromIndex, toIndex)
}

// GetOwnedTokens is a free data retrieval call binding the contract method 0x082a6569.
//
// Solidity: function getOwnedTokens(address user, uint256 fromIndex, uint256 toIndex) view returns((uint256,uint256,string)[])
func (_GameNFT1155 *GameNFT1155CallerSession) GetOwnedTokens(user common.Address, fromIndex *big.Int, toIndex *big.Int) ([]GameNFT1155TokenInfo, error) {
	return _GameNFT1155.Contract.GetOwnedTokens(&_GameNFT1155.CallOpts, user, fromIndex, toIndex)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Caller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_GameNFT1155 *GameNFT1155Session) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _GameNFT1155.Contract.GetRoleAdmin(&_GameNFT1155.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_GameNFT1155 *GameNFT1155CallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _GameNFT1155.Contract.GetRoleAdmin(&_GameNFT1155.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_GameNFT1155 *GameNFT1155Caller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_GameNFT1155 *GameNFT1155Session) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _GameNFT1155.Contract.GetRoleMember(&_GameNFT1155.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_GameNFT1155 *GameNFT1155CallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _GameNFT1155.Contract.GetRoleMember(&_GameNFT1155.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_GameNFT1155 *GameNFT1155Caller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_GameNFT1155 *GameNFT1155Session) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _GameNFT1155.Contract.GetRoleMemberCount(&_GameNFT1155.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_GameNFT1155 *GameNFT1155CallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _GameNFT1155.Contract.GetRoleMemberCount(&_GameNFT1155.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_GameNFT1155 *GameNFT1155Caller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_GameNFT1155 *GameNFT1155Session) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _GameNFT1155.Contract.HasRole(&_GameNFT1155.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_GameNFT1155 *GameNFT1155CallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _GameNFT1155.Contract.HasRole(&_GameNFT1155.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_GameNFT1155 *GameNFT1155Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_GameNFT1155 *GameNFT1155Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _GameNFT1155.Contract.IsApprovedForAll(&_GameNFT1155.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_GameNFT1155 *GameNFT1155CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _GameNFT1155.Contract.IsApprovedForAll(&_GameNFT1155.CallOpts, account, operator)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_GameNFT1155 *GameNFT1155Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_GameNFT1155 *GameNFT1155Session) Paused() (bool, error) {
	return _GameNFT1155.Contract.Paused(&_GameNFT1155.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_GameNFT1155 *GameNFT1155CallerSession) Paused() (bool, error) {
	return _GameNFT1155.Contract.Paused(&_GameNFT1155.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_GameNFT1155 *GameNFT1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_GameNFT1155 *GameNFT1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _GameNFT1155.Contract.SupportsInterface(&_GameNFT1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_GameNFT1155 *GameNFT1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _GameNFT1155.Contract.SupportsInterface(&_GameNFT1155.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_GameNFT1155 *GameNFT1155Caller) Uri(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _GameNFT1155.contract.Call(opts, &out, "uri", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_GameNFT1155 *GameNFT1155Session) Uri(tokenId *big.Int) (string, error) {
	return _GameNFT1155.Contract.Uri(&_GameNFT1155.CallOpts, tokenId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_GameNFT1155 *GameNFT1155CallerSession) Uri(tokenId *big.Int) (string, error) {
	return _GameNFT1155.Contract.Uri(&_GameNFT1155.CallOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_GameNFT1155 *GameNFT1155Transactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_GameNFT1155 *GameNFT1155Session) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _GameNFT1155.Contract.Burn(&_GameNFT1155.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _GameNFT1155.Contract.Burn(&_GameNFT1155.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_GameNFT1155 *GameNFT1155Transactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_GameNFT1155 *GameNFT1155Session) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _GameNFT1155.Contract.BurnBatch(&_GameNFT1155.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _GameNFT1155.Contract.BurnBatch(&_GameNFT1155.TransactOpts, account, ids, values)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155Transactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155Session) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.Contract.GrantRole(&_GameNFT1155.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.Contract.GrantRole(&_GameNFT1155.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Transactor) Mint(opts *bind.TransactOpts, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "mint", to, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Session) Mint(to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.Mint(&_GameNFT1155.TransactOpts, to, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) Mint(to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.Mint(&_GameNFT1155.TransactOpts, to, id, amount, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Transactor) MintBatch(opts *bind.TransactOpts, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "mintBatch", to, ids, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Session) MintBatch(to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.MintBatch(&_GameNFT1155.TransactOpts, to, ids, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) MintBatch(to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.MintBatch(&_GameNFT1155.TransactOpts, to, ids, amounts, data)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_GameNFT1155 *GameNFT1155Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_GameNFT1155 *GameNFT1155Session) Pause() (*types.Transaction, error) {
	return _GameNFT1155.Contract.Pause(&_GameNFT1155.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) Pause() (*types.Transaction, error) {
	return _GameNFT1155.Contract.Pause(&_GameNFT1155.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155Transactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155Session) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.Contract.RenounceRole(&_GameNFT1155.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.Contract.RenounceRole(&_GameNFT1155.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155Transactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155Session) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.Contract.RevokeRole(&_GameNFT1155.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GameNFT1155.Contract.RevokeRole(&_GameNFT1155.TransactOpts, role, account)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SafeBatchTransferFrom(&_GameNFT1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SafeBatchTransferFrom(&_GameNFT1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_GameNFT1155 *GameNFT1155Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SafeTransferFrom(&_GameNFT1155.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SafeTransferFrom(&_GameNFT1155.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_GameNFT1155 *GameNFT1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_GameNFT1155 *GameNFT1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SetApprovalForAll(&_GameNFT1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SetApprovalForAll(&_GameNFT1155.TransactOpts, operator, approved)
}

// SetBaseTokenURI is a paid mutator transaction binding the contract method 0x30176e13.
//
// Solidity: function setBaseTokenURI(string baseTokenURI_) returns()
func (_GameNFT1155 *GameNFT1155Transactor) SetBaseTokenURI(opts *bind.TransactOpts, baseTokenURI_ string) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "setBaseTokenURI", baseTokenURI_)
}

// SetBaseTokenURI is a paid mutator transaction binding the contract method 0x30176e13.
//
// Solidity: function setBaseTokenURI(string baseTokenURI_) returns()
func (_GameNFT1155 *GameNFT1155Session) SetBaseTokenURI(baseTokenURI_ string) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SetBaseTokenURI(&_GameNFT1155.TransactOpts, baseTokenURI_)
}

// SetBaseTokenURI is a paid mutator transaction binding the contract method 0x30176e13.
//
// Solidity: function setBaseTokenURI(string baseTokenURI_) returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) SetBaseTokenURI(baseTokenURI_ string) (*types.Transaction, error) {
	return _GameNFT1155.Contract.SetBaseTokenURI(&_GameNFT1155.TransactOpts, baseTokenURI_)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_GameNFT1155 *GameNFT1155Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GameNFT1155.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_GameNFT1155 *GameNFT1155Session) Unpause() (*types.Transaction, error) {
	return _GameNFT1155.Contract.Unpause(&_GameNFT1155.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_GameNFT1155 *GameNFT1155TransactorSession) Unpause() (*types.Transaction, error) {
	return _GameNFT1155.Contract.Unpause(&_GameNFT1155.TransactOpts)
}

// GameNFT1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the GameNFT1155 contract.
type GameNFT1155ApprovalForAllIterator struct {
	Event *GameNFT1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155ApprovalForAll represents a ApprovalForAll event raised by the GameNFT1155 contract.
type GameNFT1155ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_GameNFT1155 *GameNFT1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*GameNFT1155ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155ApprovalForAllIterator{contract: _GameNFT1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_GameNFT1155 *GameNFT1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *GameNFT1155ApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155ApprovalForAll)
				if err := _GameNFT1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_GameNFT1155 *GameNFT1155Filterer) ParseApprovalForAll(log types.Log) (*GameNFT1155ApprovalForAll, error) {
	event := new(GameNFT1155ApprovalForAll)
	if err := _GameNFT1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the GameNFT1155 contract.
type GameNFT1155PausedIterator struct {
	Event *GameNFT1155Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155Paused represents a Paused event raised by the GameNFT1155 contract.
type GameNFT1155Paused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_GameNFT1155 *GameNFT1155Filterer) FilterPaused(opts *bind.FilterOpts) (*GameNFT1155PausedIterator, error) {

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &GameNFT1155PausedIterator{contract: _GameNFT1155.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_GameNFT1155 *GameNFT1155Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *GameNFT1155Paused) (event.Subscription, error) {

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155Paused)
				if err := _GameNFT1155.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_GameNFT1155 *GameNFT1155Filterer) ParsePaused(log types.Log) (*GameNFT1155Paused, error) {
	event := new(GameNFT1155Paused)
	if err := _GameNFT1155.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155RoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the GameNFT1155 contract.
type GameNFT1155RoleAdminChangedIterator struct {
	Event *GameNFT1155RoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155RoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155RoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155RoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155RoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155RoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155RoleAdminChanged represents a RoleAdminChanged event raised by the GameNFT1155 contract.
type GameNFT1155RoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_GameNFT1155 *GameNFT1155Filterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*GameNFT1155RoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155RoleAdminChangedIterator{contract: _GameNFT1155.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_GameNFT1155 *GameNFT1155Filterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *GameNFT1155RoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155RoleAdminChanged)
				if err := _GameNFT1155.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_GameNFT1155 *GameNFT1155Filterer) ParseRoleAdminChanged(log types.Log) (*GameNFT1155RoleAdminChanged, error) {
	event := new(GameNFT1155RoleAdminChanged)
	if err := _GameNFT1155.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155RoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the GameNFT1155 contract.
type GameNFT1155RoleGrantedIterator struct {
	Event *GameNFT1155RoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155RoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155RoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155RoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155RoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155RoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155RoleGranted represents a RoleGranted event raised by the GameNFT1155 contract.
type GameNFT1155RoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_GameNFT1155 *GameNFT1155Filterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*GameNFT1155RoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155RoleGrantedIterator{contract: _GameNFT1155.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_GameNFT1155 *GameNFT1155Filterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *GameNFT1155RoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155RoleGranted)
				if err := _GameNFT1155.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_GameNFT1155 *GameNFT1155Filterer) ParseRoleGranted(log types.Log) (*GameNFT1155RoleGranted, error) {
	event := new(GameNFT1155RoleGranted)
	if err := _GameNFT1155.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155RoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the GameNFT1155 contract.
type GameNFT1155RoleRevokedIterator struct {
	Event *GameNFT1155RoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155RoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155RoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155RoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155RoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155RoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155RoleRevoked represents a RoleRevoked event raised by the GameNFT1155 contract.
type GameNFT1155RoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_GameNFT1155 *GameNFT1155Filterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*GameNFT1155RoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155RoleRevokedIterator{contract: _GameNFT1155.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_GameNFT1155 *GameNFT1155Filterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *GameNFT1155RoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155RoleRevoked)
				if err := _GameNFT1155.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_GameNFT1155 *GameNFT1155Filterer) ParseRoleRevoked(log types.Log) (*GameNFT1155RoleRevoked, error) {
	event := new(GameNFT1155RoleRevoked)
	if err := _GameNFT1155.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the GameNFT1155 contract.
type GameNFT1155TransferBatchIterator struct {
	Event *GameNFT1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155TransferBatch represents a TransferBatch event raised by the GameNFT1155 contract.
type GameNFT1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_GameNFT1155 *GameNFT1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*GameNFT1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155TransferBatchIterator{contract: _GameNFT1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_GameNFT1155 *GameNFT1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *GameNFT1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155TransferBatch)
				if err := _GameNFT1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_GameNFT1155 *GameNFT1155Filterer) ParseTransferBatch(log types.Log) (*GameNFT1155TransferBatch, error) {
	event := new(GameNFT1155TransferBatch)
	if err := _GameNFT1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the GameNFT1155 contract.
type GameNFT1155TransferSingleIterator struct {
	Event *GameNFT1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155TransferSingle represents a TransferSingle event raised by the GameNFT1155 contract.
type GameNFT1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_GameNFT1155 *GameNFT1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*GameNFT1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155TransferSingleIterator{contract: _GameNFT1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_GameNFT1155 *GameNFT1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *GameNFT1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155TransferSingle)
				if err := _GameNFT1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_GameNFT1155 *GameNFT1155Filterer) ParseTransferSingle(log types.Log) (*GameNFT1155TransferSingle, error) {
	event := new(GameNFT1155TransferSingle)
	if err := _GameNFT1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the GameNFT1155 contract.
type GameNFT1155URIIterator struct {
	Event *GameNFT1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155URI represents a URI event raised by the GameNFT1155 contract.
type GameNFT1155URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_GameNFT1155 *GameNFT1155Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*GameNFT1155URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &GameNFT1155URIIterator{contract: _GameNFT1155.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_GameNFT1155 *GameNFT1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *GameNFT1155URI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155URI)
				if err := _GameNFT1155.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_GameNFT1155 *GameNFT1155Filterer) ParseURI(log types.Log) (*GameNFT1155URI, error) {
	event := new(GameNFT1155URI)
	if err := _GameNFT1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GameNFT1155UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the GameNFT1155 contract.
type GameNFT1155UnpausedIterator struct {
	Event *GameNFT1155Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GameNFT1155UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GameNFT1155Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GameNFT1155Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GameNFT1155UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GameNFT1155UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GameNFT1155Unpaused represents a Unpaused event raised by the GameNFT1155 contract.
type GameNFT1155Unpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_GameNFT1155 *GameNFT1155Filterer) FilterUnpaused(opts *bind.FilterOpts) (*GameNFT1155UnpausedIterator, error) {

	logs, sub, err := _GameNFT1155.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &GameNFT1155UnpausedIterator{contract: _GameNFT1155.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_GameNFT1155 *GameNFT1155Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *GameNFT1155Unpaused) (event.Subscription, error) {

	logs, sub, err := _GameNFT1155.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GameNFT1155Unpaused)
				if err := _GameNFT1155.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_GameNFT1155 *GameNFT1155Filterer) ParseUnpaused(log types.Log) (*GameNFT1155Unpaused, error) {
	event := new(GameNFT1155Unpaused)
	if err := _GameNFT1155.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
