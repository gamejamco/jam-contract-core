// Sources flattened with hardhat v2.8.4 https://hardhat.org

// File @openzeppelin/contracts/utils/Context.sol@v4.5.0

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0

// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File @openzeppelin/contracts/security/Pausable.sol@v4.5.0

// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.5.0

// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File contracts/Vesting.sol

/* SPDX-License-Identifier: UNLICENSED */

pragma solidity ^0.8.0;



contract Vesting is Ownable, Pausable, ReentrancyGuard {
    struct Program {
        uint256 id;
        string metadata;
        uint256 startRegistration;
        uint256 endRegistration;
        uint256 allocationAmount;
        uint256 availableAmount;
        uint256 tgeUnlockPercentage;
        uint256 unlockMoment;
        uint256 unlockDistance;
        uint256 milestoneUnlockPercentage;
    }

    struct VestingInfo {
        uint256 totalClaimedAmount;
        uint256 removedMoment;
        mapping(uint256 => uint256) totalAtProgram;
        mapping(uint256 => uint256) claimedAtProgram;
        mapping(uint256 => bool) isInvestorAtProgram;
    }

    uint256 public TGE;
    Program[] private _allPrograms;
    mapping(address => bool) private _operators;
    mapping(address => VestingInfo) private _vestingInfoOf;

    event ProgramCreated(
        uint256 id,
        string metadata,
        uint256 startRegistration,
        uint256 endRegistration,
        uint256 initialAmount,
        uint256 tgeUnlockPercentage,
        uint256 unlockMoment,
        uint256 unlockDistance,
        uint256 milestoneUnlockPercentage
    );
    event MetadataUpdated(uint256 programId, string metadata);
    event ParticipantRegistered(
        address participant,
        uint256 programId,
        uint256 amount
    );
    event ClaimSuccessful(
        address participant,
        uint256 programId,
        uint256 amount
    );
    event EmergencyWithdrawn(address recipient, uint256 amount);

    constructor() Ownable() {
        _operators[msg.sender] = true;
    }

    receive() external payable {}

    modifier onlyOperator() {
        require(_operators[msg.sender], "Caller is not operator");
        _;
    }

    function numPrograms() external view returns (uint256) {
        return _allPrograms.length;
    }

    function getProgramsInfo() external view returns (Program[] memory) {
        return _allPrograms;
    }

    function getVestingAmount(address participant, uint256 programId)
        external
        view
        returns (uint256)
    {
        return _vestingInfoOf[participant].totalAtProgram[programId];
    }

    function getTotalVestingAmount(address participant)
        external
        view
        returns (uint256)
    {
        uint256 totalVestingAmount = 0;
        for (uint256 i = 0; i < _allPrograms.length; i++)
            totalVestingAmount += _vestingInfoOf[participant].totalAtProgram[i];
        return totalVestingAmount;
    }

    function getClaimedAmount(address participant, uint256 programId)
        external
        view
        returns (uint256)
    {
        return _vestingInfoOf[participant].claimedAtProgram[programId];
    }

    function getTotalClaimedAmount(address participant)
        external
        view
        returns (uint256)
    {
        return _vestingInfoOf[participant].totalClaimedAmount;
    }

    function getClaimableAmount(address participant, uint256 programId)
        public
        view
        returns (uint256)
    {
        if (programId >= _allPrograms.length) return 0;
        if (TGE == 0) return 0;
        uint256 programUnlockedAmount = 0;
        uint256 lastMoment = block.timestamp;
        if (_vestingInfoOf[participant].removedMoment > 0)
            lastMoment = _vestingInfoOf[participant].removedMoment;
        uint256 vestingAmount = _vestingInfoOf[participant].totalAtProgram[
            programId
        ];
        if (vestingAmount > 0) {
            Program memory program = _allPrograms[programId];
            if (lastMoment >= TGE)
                programUnlockedAmount +=
                    (vestingAmount * program.tgeUnlockPercentage) /
                    10000;
            if (lastMoment >= program.unlockMoment) {
                uint256 numUnlockTimes = (lastMoment - program.unlockMoment) /
                    program.unlockDistance +
                    1;
                programUnlockedAmount +=
                    (vestingAmount *
                        program.milestoneUnlockPercentage *
                        numUnlockTimes) /
                    10000;
            }
            if (programUnlockedAmount > vestingAmount)
                programUnlockedAmount = vestingAmount;
        }
        return
            programUnlockedAmount -
            _vestingInfoOf[participant].claimedAtProgram[programId];
    }

    function getTotalClaimableAmount(address participant)
        external
        view
        returns (uint256)
    {
        uint256 totalClaimableAmount = 0;
        for (uint256 i = 0; i < _allPrograms.length; i++)
            totalClaimableAmount += getClaimableAmount(participant, i);
        return totalClaimableAmount;
    }

    function setOperators(address[] memory operators, bool[] memory isOperators)
        external
        onlyOwner
    {
        require(operators.length == isOperators.length, "Lengths mismatch");
        for (uint256 i = 0; i < operators.length; i++)
            _operators[operators[i]] = isOperators[i];
    }

    function updateMetadata(uint256 programId, string calldata newMetadata)
        external
        onlyOperator
    {
        require(programId < _allPrograms.length, "Program does not exist");
        _allPrograms[programId].metadata = newMetadata;
    }

    function createPrograms(
        uint256 TGE_,
        string[] memory metadatas,
        uint256[] memory startRegistrations,
        uint256[] memory endRegistrations,
        uint256[] memory initialAmounts,
        uint256[] memory tgeUnlockPercentages,
        uint256[] memory unlockMoments,
        uint256[] memory unlockDistances,
        uint256[] memory milestoneUnlockPercentages
    ) external onlyOperator {
        require(
            metadatas.length == startRegistrations.length,
            "Lengths mismatch"
        );
        require(
            metadatas.length == endRegistrations.length,
            "Lengths mismatch"
        );
        require(metadatas.length == initialAmounts.length, "Lengths mismatch");
        require(
            metadatas.length == tgeUnlockPercentages.length,
            "Lengths mismatch"
        );
        require(metadatas.length == unlockMoments.length, "Lengths mismatch");
        require(metadatas.length == unlockDistances.length, "Lengths mismatch");
        require(
            metadatas.length == milestoneUnlockPercentages.length,
            "Lengths mismatch"
        );
        if (TGE == 0) {
            require(TGE_ > 0, "TGE must be real moment");
            TGE = TGE_;
        } else require(TGE_ == TGE, "Wrong TGE moment");
        for (uint256 i = 0; i < metadatas.length; i++) {
            require(
                unlockMoments[i] >= TGE,
                "TGE must not happen after unlock moment"
            );
            require(
                tgeUnlockPercentages[i] + milestoneUnlockPercentages[i] <=
                    10000,
                "Unlock percentages cannot exceed 100%"
            );
            uint256 id = _allPrograms.length;
            _allPrograms.push(
                Program(
                    id,
                    metadatas[i],
                    startRegistrations[i],
                    endRegistrations[i],
                    initialAmounts[i],
                    initialAmounts[i],
                    tgeUnlockPercentages[i],
                    unlockMoments[i],
                    unlockDistances[i],
                    milestoneUnlockPercentages[i]
                )
            );
            emit ProgramCreated(
                id,
                metadatas[i],
                startRegistrations[i],
                endRegistrations[i],
                initialAmounts[i],
                tgeUnlockPercentages[i],
                unlockMoments[i],
                unlockDistances[i],
                milestoneUnlockPercentages[i]
            );
        }
    }

    function registerParticipant(
        address participant,
        uint256 programId,
        bool isInvestor
    ) external payable onlyOperator {
        require(participant != address(0), "Register the zero address");
        require(programId < _allPrograms.length, "Program does not exist");
        Program storage program = _allPrograms[programId];
        require(
            block.timestamp >= program.startRegistration,
            "Program is not available"
        );
        require(block.timestamp <= program.endRegistration, "Program is over");
        require(
            msg.value <= program.availableAmount,
            "Available amount not enough"
        );
        _vestingInfoOf[participant].isInvestorAtProgram[programId] = isInvestor;
        _vestingInfoOf[participant].totalAtProgram[programId] += msg.value;
        program.availableAmount -= msg.value;
        emit ParticipantRegistered(participant, programId, msg.value);
    }

    function removeParticipant(address participant, uint256 programId)
        external
        onlyOperator
    {
        require(
            !_vestingInfoOf[participant].isInvestorAtProgram[programId],
            "Cannot remove an investor"
        );
        require(
            _vestingInfoOf[participant].removedMoment == 0,
            "Participant already removed"
        );
        _vestingInfoOf[participant].removedMoment = block.timestamp;
    }

    function claimTokens(uint256 programId) public whenNotPaused {
        uint256 claimableAmount = getClaimableAmount(msg.sender, programId);
        _vestingInfoOf[msg.sender].totalClaimedAmount += claimableAmount;
        _vestingInfoOf[msg.sender].claimedAtProgram[
            programId
        ] += claimableAmount;
        (bool success, ) = payable(msg.sender).call{value: claimableAmount}("");
        require(success, "Claim tokens failed");
        emit ClaimSuccessful(msg.sender, programId, claimableAmount);
    }

    function claimAllTokens() external whenNotPaused nonReentrant {
        for (uint256 i = 0; i < _allPrograms.length; i++) {
            VestingInfo storage vestingInfo = _vestingInfoOf[msg.sender];
            if (vestingInfo.totalAtProgram[i] > vestingInfo.claimedAtProgram[i])
                claimTokens(i);
        }
    }

    function pause() external onlyOperator {
        _pause();
    }

    function unpause() external onlyOperator {
        _unpause();
    }

    function emergencyWithdraw(address payable recipient)
        external
        onlyOwner
        whenPaused
    {
        uint256 amount = address(this).balance;
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Emergency withdraw failed");
        emit EmergencyWithdrawn(recipient, amount);
    }
}
